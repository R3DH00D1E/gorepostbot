name: Deploy RepostBot

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build the bot
        run: |
          go build -o repostbot main.go

      - name: Check for config.json
        run: |
          if [ ! -f deploy/config.json ]; then
            echo "Error: deploy/config.json not found."
            exit 1
          fi

      - name: Substitute placeholders in config.json
        run: |
          # Заменяем плейсхолдеры на значения из GitHub Secrets
          sed -e "s|your_telegram_token_here|${{ secrets.TG_TOKEN }}|g" \
              -e "s|your_vk_token_here|${{ secrets.VK_TOKEN }}|g" \
              -e "s|user_id_vk|${{ secrets.TARGET_USER }}|g" \
              -e "s|path/to/cache.json|/home/${{ secrets.USER }}/repostbot/cache.json|g" \
              -e "s|120|${{ secrets.POLL_INTERVAL }}|g" \
              -e "s|-1001234567890|${{ secrets.CHAT_ID }}|g" \
              deploy/config.json > deploy/config.json.tmp

          # Перемещаем временный файл обратно
          mv deploy/config.json.tmp deploy/config.json

      - name: Create directory and copy config
        run: |
          # Создаем директорию в домашней папке для конфигурации
          mkdir -p /home/${{ secrets.USER }}/repostbot
          # Копируем конфигурацию
          cp deploy/config.json /home/${{ secrets.USER }}/repostbot/
          # Убедимся, что права доступа правильные
          chown -R ${{ secrets.USER }}:${{ secrets.USER }} /home/${{ secrets.USER }}/repostbot

      - name: Substitute placeholders in repostbot.service
        run: |
          # Проверяем, существует ли файл
          if [ ! -f deploy/repostbot.service ]; then
            echo "Error: deploy/repostbot.service not found."
            exit 1
          fi

          # Заменяем плейсхолдеры {{WORKDIR}} и %USER%
          sed -e "s|{{WORKDIR}}|/home/${{ secrets.USER }}/repostbot|g" \
              -e "s|%USER%|${{ secrets.USER }}|g" \
              deploy/repostbot.service > deploy/repostbot.service.tmp

          # Перемещаем временный файл обратно
          mv deploy/repostbot.service.tmp deploy/repostbot.service

          # Копируем файл службы в /etc/systemd/system/
          sudo cp deploy/repostbot.service /etc/systemd/system/repostbot.service

      - name: Copy repostbot.timer
        run: |
          if [ -f deploy/repostbot.timer ]; then
            sudo cp deploy/repostbot.timer /etc/systemd/system/repostbot.timer
          else
            echo "Warning: repostbot.timer not found, skipping"
          fi

      - name: Stop existing services and processes
        run: |
          # Останавливаем существующие службы
          sudo systemctl stop repostbot.service || true
          sudo systemctl stop repostbot.timer || true
          
          # Принудительно завершаем любые оставшиеся процессы
          echo "Searching for processes to kill..."
          if pgrep -f "/usr/local/bin/repostbot"; then
            echo "Process is still running, killing with SIGKILL"
            sudo pkill -9 -f "/usr/local/bin/repostbot" || true
            sleep 3
          fi

          # Проверяем еще раз и показываем список
          if pgrep -f "/usr/local/bin/repostbot"; then
            echo "WARNING: Process still running! Details:"
            sudo ps aux | grep repostbot
            # Убиваем все процессы принудительно по имени файла
            sudo fuser -k /usr/local/bin/repostbot 2>/dev/null || true
            sleep 2
          fi

      - name: Copy executable
        run: |
          # Сначала копируем с другим именем
          sudo cp repostbot /usr/local/bin/repostbot.new
          sudo chmod +x /usr/local/bin/repostbot.new
          
          # Затем перемещаем файл (атомарная операция)
          sudo mv -f /usr/local/bin/repostbot.new /usr/local/bin/repostbot

      - name: Configure systemd
        run: |
          # Обновляем конфигурацию systemd
          sudo systemctl daemon-reload

          # Включаем и запускаем службы
          sudo systemctl enable repostbot.service
          
          # Если существует таймер, включаем и его
          if [ -f /etc/systemd/system/repostbot.timer ]; then
            sudo systemctl enable repostbot.timer
            sudo systemctl restart repostbot.timer
          fi
          
          # Запускаем основную службу
          sudo systemctl restart repostbot.service
